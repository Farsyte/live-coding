212
(  COLD AND WRM ENTRY,  USER PARAMETERS            WFR-79APR29 )
ASSEMBLER OBJECT MEM HEX
NOP     HERE JMP                 ( WORD ALIGNED VECTOR TO COLD )
NOP     HERE JMP                 ( WORD ALIGNED VECTOR TO WARM )
0000 ,  0001 ,                  ( CPU AND REVISION PARAMERTERS )
0000 ,                      ( TOPMOST WORD IN FORTH VOCABULARY )
  7F ,                                    ( BACKSPCE CHARACTER )
3BA0 ,                                     ( INITIAL USER AREA )
009E ,                                  ( INITIAL TOP OF STACK )
01FF ,                           ( INITIAL TOP OF RETURN STACK )
0100 ,                                 ( TERMINAL INPUT BUFFER )
001F ,                              ( INITIAL NAME FIELD WIDTH )
0001 ,                       ( INITIAL WARNING, 1=USE SCREEN 4 )
0200 ,                                         ( INITIAL FENCE )
0000 ,                               ( COLD START VALUE FOR DP )
0000 ,                  ( COLD START VALUIE FOR VOC-LINK )    ;S
213
(  START OF NUCLEUS: DPUSH HPUSH NEXT LIT          WFR-78DEC26 )
HEX
CODE LIT                                ( PUSH {IP+} TO STACK *)
    B LDAX B INX A L MOV
    B LDAX B INX A H MOV HERE JMP C;

    D PUSH H PUSH
HERE ' (NEXT) !
LABEL NEXT                                 ( W=*IP++; PC=*W++ *)
    B LDAX B INX A E MOV
    B LDAX B INX A D MOV
    
                                                    C; ( TODO *)
HERE CR ." NEXT: " qd
                                                              ;S
214
(  EXECUTE                                          WFR-790225 )

( ORIGINAL HAS "SETUP" CODE HERE. )                 C; ( TODO *)

CODE EXECUTE               ( EXECUTE A WORD BY ITS CODE FIELD *)
                                       ( ADDRESS ON THE STACK *)
                                                    C; ( TODO *)
                                                              ;S
215
(  BRANCH 0BRANCH       W/16-BIT OFFSET            WFR-79APR01 )

CODE BRANCH            ( ADJUST IP BY IN-LINE 16-BIT LIETERAL *)
                                                    C; ( TODO *)

CODE 0BRANCH            ( IF BOT IS ZERO, BRANCH FROM LITERAL *)
                                                    C; ( TODO *)

                                                              ;S
216
(  LOOP CONTROL                                    WFR-79MAR20 )

CODE (LOOP)       ( INCREMENT LOOP INDEX, LOOP UNTIL => LIMIT *)
                                                    C; ( TODO *)

CODE (+LOOP)             ( INCREMENT INDEX BY STACK VALUE +/0 *)
                                                    C; ( TODO *)
                                                              ;S
217
(  {DO} I                                          WFR-79MAR30 )

CODE (DO)              ( MOVE TWO STACK ITEMS TO RETURN STACK *)
                                                    C; ( TODO *)

CODE I                     ( COPY CURRENT LOOP INDEX TO STACK *)
                           ( THIS WILL LATER BE POINTED TO 'R' )

                                                              ;S
218
(  DIGIT                                           WFR-79MAR30 )

CODE DIGIT      ( CONVERT ASCII CHAR-SECOND, WITH BASE-BOTTOM *)
                    ( IF OK RETURN DIGIT-SECOND, TRUE-BOTTOM; *)
                                    ( OTHERWISE FALSE-BOTTOM. *)
                                                    C; ( TODO *)
                                                              ;S
219
(  {FIND}                                          WFR-79MAR30 )

CODE (FIND)   ( HERE, NFA ... PFA, LEN BYTE, TRUE; ELSE FALSE *)
                                                    C; ( TODO *)
                                                              ;S
220
(  {ENCLOSE}                                       WFR-79MAR30 )

CODE (ENCLOSE)   ( ENTER WITH ADDRESS-2, DELIM-1, RETURN WITH *)
    ( ADDR-4, AND OFFSET TO FIRST CH-3, END WORD-2, NEXT CH-1 *)
                                                    C; ( TODO *)
                                                              ;S
221
(  TERMINAL VECTORS                                WFR-79MAR30 )
(  SCREENS 63 AND 64 PATCH THE CFA OF THESE WORDS. )

CODE EMIT              ( PRINT ASCII VALUE ON BOTTOM OF STACK *)
                                                C;

CODE KEY         ( ACCEPT ONE TERMINAL CHARACTER TO THE STACK *)
                                                C;

CODE ?TERMINAL       ( 'BREAK' LEAVES 1 ON STACK; OTHERWISE 0 *)
                                                C;

CODE CR          ( EXECURE CAR. RETURN, LINE FEED ON TERMINAL *)
                                                C;
                                                              ;S
222
(  CMOVE                                           WFR-79MAR20 )

CODE CMOVE    ( WITHIN MEMORY; ENTER W/ FROM-3, TO-N2, QUAN-1 *)
                                                    C; ( TODO *)

                                                              ;S
223
(  U*   UNSIGNED MULTIPLY FOR 16 BITS           RS-WFR-80AUG16 )
CODE U*          ( 16 BIT MULTIPLICAND-2, 16 BIT MULTIPLIER-1 *)
              ( 32 BIT UNSIGNED PRODUCT: LO WORD-2, HI WORD-1 *)
                                                    C; ( TODO *)
                                                              ;S
224
(  U/   UNSIGNED DIVIDE FOR 31 BITS                WFR-79APR29 )
CODE U/             ( 31 BIT DIVIDEND-2, -3, 16 BIT DIVISOR-1 *)
                      ( 16 BIT REMAINDER-2, 16 BIT QUOTIENT-1 *)
                                                    C; ( TODO *)
                                                              ;S
225
(  LOGICALS                                        WFR-79APR20 )

CODE AND          ( LOGICAL BITWISE 'AND' OF BOTTOM TWO ITEMS *)
                                                    C; ( TODO *)

CODE OR            ( LOGICAL BITWISE 'OR' OF BOTTOM TWO ITEMS *)
                                                    C; ( TODO *)

CODE XOR         ( LOGICAL 'EXCLUSIVE-OR' OF BOTTOM TWO ITEMS *)
                                                    C; ( TODO *)
                                                              ;S
226
(  STACK INITIALIZATION                            WFR-79MAR30 )

CODE SP@                       ( FETCH STACK POINTER TO STACK *)
                                                    C; ( TODO *)

CODE SP!                                  ( LOAD SP FROM 'S0' *)
                                                    C; ( TODO *)

CODE RP!                                  ( LOAD RP FROM 'R0' *)
                                                    C; ( TODO *)

CODE ;S               ( RESTORE IP REGISTER FROM RETURN STACK *)
                                                    C; ( TODO *)
                                                              ;S
227
(  RETURN STACK WORDS                              WFR-79MAR29 )

CODE LEAVE           ( FORCE EXIT OF DO-LOOP BY SETTING LIMIT *)
                                                    C; ( TODO *)

CODE >R               ( MOVE FROM COMP. STACK TO RETURN STACK *)
                                                    C; ( TODO *)

CODE R>               ( MOVE FROM RETURN STACK TO COMP. STACK *)
                                                    C; ( TODO *)

CODE R       ( COPY THE BOTTOM OF RETURN STACK TO COMP. STACK *)
                                                    C; ( TODO *)
                                                              ;S
228
(  TESTS AND LOGICALS                              WFR-79MAR19 )

CODE 0=            ( REVERSE LOGICAL STATE OF BOTTOM OF STACK *)
                                                    C; ( TODO *)

CODE 0<            ( LEAVE TRUE IF NEGATIVE; OTHERWISE FALSE. *)
                                                    C; ( TODO *)
                                                              ;S
229
(  MATH                                            WFR-79MAR19 )

CODE +          ( LEAVE THE SUM OF THE BOTTOM TWO STACK ITEMS *)
                                                    C; ( TODO *)

CODE D+            ( ADD TWO DOUBLE INTERGERS, LEAVING DOUBLE *)
                                                    C; ( TODO *)

CODE MINUS          ( TWOS COMPLEMENT OF BOTTOM SINGLE NUMBER *)
                                                    C; ( TODO *)

CODE D-             ( TWOS COMPLEMENT OF BOTTOM DOUBLE NUMBER *)
                                                    C; ( TODO *)
                                                              ;S
230
(  STACK MANIPULATION                              WFR-79MAR29 )

CODE OVER               ( DUPLICATE SECOND ITEM AS NEW BOTTOM *)
                                                    C; ( TODO *)

CODE DROP                             ( DROPBOTTOM STACK ITEM *)
                                                    C; ( TODO *)

CODE SWAP         ( EXCHANGE BOTTOM AND SECOND ITEMS ON STACK *)
                                                    C; ( TODO *)

CODE DUP                     ( DUPLICATE BOTTOM ITEM ON STACK *)
                                                    C; ( TODO *)
                                                              ;S
231
(  MEMORY                                          WFR-79MAR30 )

CODE +!    ( ADD SECOND TO MEMORY 16 BITS ADDRESSED BY BOTTOM *)
                                                    C; ( TODO *)

CODE TOGGLE            ( BYTE AT ADDRESS-2, BIT PATTERN-1 ... *)
                                                    C; ( TODO *)
                                                              ;S
232
(  MEMORY FETCH AND STORE                           WFR-781202 )

CODE @                    ( REPLACE STACK ADDRESS WITH 16 BIT *)
                                   ( CONTENTS OF THAT ADDRESS *)
                                                    C; ( TODO *)

CODE C@               ( REPLACE STACK ADDRESS WITH 8 BIT BYTE *)
                                                    C; ( TODO *)

CODE !          ( STORE SECOND AT 16 BITS ADDRESSED BY BOTTOM *)
                                                    C; ( TODO *)

CODE C!            ( STORE SECOND AT BYTE ADDRESSED BY BOTTOM *)
                                                    C; ( TODO *)
                                                              ;S
233
(  COLON AND SEMICOLON                             WFR-79MAR30 )

:  :                  ( CREATE NEW COLON-DEFINITION UNTIL ';' *)
   ?EXEC !CSP CURRENT @ CONTEXT !
   CREATE ] ;CODE IMMEDIATE
( ASSEMBLY CODE FOR colon                                TODO *)

:  ;                             ( TERMINATE COLON-DEFINITION *)
   ?CSP COMPILE ;S
   SMUDGE [ ; IMMEDIATE
                                                              ;S
234
(  CONSTANT, VARIABLE, USER                        WFR-79MAR30 )
: CONSTANT               ( WORD WHICH LATER CREATES CONSTANTS *)
  CREATE SMUDGE , ;CODE
( ASSEMBLY CODE FOR constant                             TODO *)

: VARIABLE               ( WORD WHICH LATER CREATES VARIABLES *)
  CONSTANT ;CODE
( ASSEMBLY CODE FOR variable                             TODO *)

: USER                                 ( CREATE USER VARIABLE *)
  CONSTANT ;CODE
( ASSEMBLY CODE FOR user                                 TODO *)
                                                              ;S
235
(  DEFINED CONSTANTS                               WFR-78MAR22 )
HEX
00  CONSTANT  0         01  CONSTANT 1
02  CONSTANT  2         03  CONSTANT 3
20  CONSTANT  BL                                ( ASCII BLANK *)
40  CONSTANT  C/L                  ( TEXT CHARACTERS PER LINE *)

3BE0    CONSTANT    FIRST   ( FIRST BYTE RESERVED FOR BUFFERS *)
4000    CONSTANT    LIMIT            ( JUST BEYOND TOP OF RAM *)
  80    CONSTANT    B/BUF             ( BYTES PER DISC BUFFER *)
   8    CONSTANT    B/SCR  ( BLOCKS PER SCREEN = 1024 B/BUF / *)

          00 +ORIGIN
: +ORIGIN LITERAL + ;     ( LEAVES ADDRESS RELATIVE TO ORIGIN *)
                                                              ;S
236
(  USER VARIABLES                                  WFR-YYmmmDD )
HEX               ( 0 THRU 5 RESERVED,    REFERENCED TO $00A0 *)
( 06 USER  S0 )              ( TOP OF EMPTY COMPUTATION STACK *)
( 08 USER  R0 )                   ( TOP OF EMPTY RETURN STACK *)
0A   USER  TIB                        ( TERMINAL INPUT BUFFER *)
0C   USER  WIDTH                   ( MAXIMUM NAME FIELD WIDTH *)
0E   USER  WARNING                    ( CONTROL WARNING MODES *)
10   USER  FENCE                     ( BARRIER FOR FORGETTING *)
12   USER  DP                            ( DICTIONARY POINTER *)
14   USER  VOC-LINK                    ( TO NEWEST VOCABULARY *)
16   USER  BLK                         ( INTERPRETATION BLOCK *)
18   USER  IN                       ( OFFSET INTO SOURCE TEXT *)
1A   USER  OUT                      ( DISPLAY CURSOR POSITION *)
1C   USER  SCR                               ( EDITING SCREEN *)
                                                              ;S
237
(  USER VARIABLES, CONTINUED                       WFR-YYmmmDD )
1E   USER  OFFSET                 ( POSSIBLY FOR OTEHR DRIVES *)
20   USER  CONTEXT                ( VOCABULARY FIRST SEARCHED *)
22   USER  CURRENT           ( SEARCHED SECOND, COMPILED INTO *)
24   USER  STATE                          ( COMPILATION STATE *)
26   USER  BASE                  ( FOR NUMERICAL INPUT-OUTPUT *)
28   USER  DPL                       ( DECIMAL POINT LOCATION *)
2A   USER  FLD                           ( OUTPUT FIELD WIDTH *)
2C   USER  CSP                         ( CHECK STACK POSITION *)
2E   USER  R#                       ( EDITING CURSOR POSITION *)
30   USER  HLD         ( POINTS TO LAST CHARACTER HELD IN PAD *)
                                                              ;S
238
(  HI-LEVEL MISC.                                  WFR-79APR29 )
: 1+      1    +   ;          ( INCREMENT STACK NUMBER BY ONE *)
: 2+      2    +   ;          ( INCREMENT STACK NUMBER BY TWO *)
: HERE    DP   @   ;       ( FETCH NEXT FREE ADDRESS IN DICT. *)
: ALLOT   DP   +!  ;               ( MOVE DICT. POINTER AHEAD *)
: ,   HERE  ! 2 ALLOT ;         ( ENTER STACK NUMBER TO DICT. *)
: C,  HERE C! 1 ALLOT ;           ( ENTER STACK BYTE TO DICT. *)
: -   MINUS + ;                    ( LEAVE DIFF. SEC - BOTTOM *)
: =   -  0= ;                     ( LEAVE BOOLEAN OF EQUALITY *)
: <   -  0< ;                    ( LEAVE BOOLEAN OF SEC < BOT *)
: >   SWAP < ;                   ( LEAVE BOOLEAN OF SEC > BOT *)
: ROT   >R SWAP R> SWAP ;            ( ROTATE THIRD TO BOTTOM *)
: SPACE    BL EMIT ;                ( PRINT BLANK ON TERMINAL *)
: -DUP     DUP IF DUP ENDIF ;            ( DUPLICATE NON-ZERO *)
                                                              ;S
239
(  VARIABLE LENGTH NAME SUPPORT                    WFR-79MAR30 )
: TRAVERSE                           ( MOVE ACROSS NAME FIELD *)
          ( ADDRESS-2, DIRECTION-1, I.E. -1=R TO L, +1=L TO R *)
       SWAP
       BEGIN OVER + 7F OVER C@ < UNTIL SWAP DROP ;

: LATEST CURRENT @ @ ;                   ( NFA OF LATEST WORD *)

     ( FOLLOWING HAVE LITERALS DEPENDENT ON COMPUTER WORD SIZE )

: LFA    4 - ;                   ( CONVERT A WORDS PFA TO LFA *)
: CFA    2 - ;                   ( CONVERT A WORDS PFA TO CFA *)
: NFA    5 - -1 TRAVERSE ;       ( CONVERT A WORDS PFA TO NFA *)
: PFA     1 TRAVERSE 5 + ;        ( CONVET A WORDS NFA TO PFA *)

                                                              ;S
240
(  ERROR PROCEDURES, PER SHIRA                     WFR-79MAR23 )
: !CSP                         ( SAVE STACK POSITION IN 'CSP' *)
        SP@ CSP ! ; 
: ?ERROR             ( BOOLEAN-2, ERROR TYPE-1, WARN FOR TRUE *)
        SWAP IF ERROR ELSE DROP ENDIF ;
: ?COMP                              ( ERROR IF NOT COMPILING *)
        STATE @ 0= 11 ?ERROR ;
: ?EXEC                              ( ERROR IF NOT EXECUTING *)
        STATE @ 12 ?ERROR ;
: ?PAIRS                     ( VERIFY STACK VALUES ARE PAIRED *)
        - 13 ?ERROR ;
: ?CSP                                ( VERIFY STACK POSITION *)
        SP@ CSP @ - 14 ?ERROR ;
: ?LOADING                         ( VERIFY LOADING FROM DISC *)
        BLK @ 0= 16 ?ERROR ;
                                                              ;S
241
(  COMPILE, SMUDGE, HEX, DECIMAL                   WFR-79APR20 )
: COMPILE           ( COMPILE THE EXECUTION ADDRESS FOLLOWING *)
        ?COMP R> DUP 2+ >R @ , ;
: [                                        ( STOP COMPILATION *)
        0 STATE ! ; IMMEDIATE
: ]                                 ( ENTER COMPILATION STATE *)
        C0 STATE ! ;
: SMUDGE                             ( ALTER LATEST WORD NAME *)
        LATEST 20 TOGGLE ;
: HEX                              ( MAKE HEX THE IN-OUT BASE *)
        10 BASE ! ;
: DECIMAL                      ( MAKE DECIMAL THE IN-OUT BASE *)
        0A BASE ! ;
                                                              ;S
242
(  ;CODE                                           WFR-79APR20 )

: (;CODE)      ( WRITE CODE FIELD POINTING TO CALLING ADDRESS *)
        R> LATEST PFA CFA ! ;

: ;CODE                       ( TERMINATE A NEW DEFINING WORD *)
        ?CSP COMPILE (;CODE)
        [COMPILE] [ SMUDGE ; IMMEDIATE
                                                              ;S
243
(  <BUILDS, DOES>                                  WFR-79MAR20 )

: <BUILDS                     ( CREATE HADER FOR 'DOES>' WORD *)
        0 CONSTANT ;

: DOES>           ( REWRITE PFA WITH CALLING HI-LEVEL ADDRESS *)
                              ( REWRITE CFA WITH 'DOES>' CODE *)
        R> LATEST PFA ! ;CODE
( ASSEMBLY CODE FOR does                                 TODO *)
                                                              ;S
244
(  TEXT OUTPUTS                                    WFR-79APR02 )
: COUNT DUP 1+ SWAP C@ ;       ( LEAVE TEXT ADDR. CHAR. COUNT *)
: TYPE             ( TYPE STRING FROM ADDRESS-2, CHAR.COUNT-1 *)
        -DUP IF OVER + SWAP
                DO I C@ EMIT LOOP  ELSE DROP ENDIF ;
: -TRAILING      ( ADJUST CHAR. COUNT TO DROP TRAILING BLANKS *)
        DUP 0 DO OVER OVER + 1 - C@
        BL - IF LEAVE ELSE 1 - ENDIF LOOP ;
: (.")                ( TYPE IN-LINE STRING, ADJUSTING RETURN *)
        R COUNT DUP 1! R> + >R TYPE ;
: ."    22 STATE @           ( COMPILE OR PRINT QUOTED STRING *)
        IF COMPILE  (.") WORD HERE C@ 1+ ALLOT
        ELSE WORD HERE COUNT TYPE ENDIF ; IMMEDIATE
                                                              ;S
245
(  TERMINAL INPUT                                  WFR-79APR29 )
: EXPECT              ( TERMINAL INPUT MEMORY-2, CHAR LIMIT-1 *)
        OVER + OVER DO KEY DUP 0E +ORIGIN ( BS ) @ =
        IF DROP 08 OVER I = DUP R> 2  + >R -
          ELSE ( NOT BS ) DUP 0D =
            IF ( RET ) LEAVE DROP BL 0 ELSE DUP ENDIF
            I C! 0 I 1+ !
        ENDIF EMIT LOOP DROP ;
: QUERY TIB @ 50 EXPECT 0 IN ! ;
8081  HERE
: X   BLK @                             ( END-OF-TEXT IS NULL *)
      IF ( DISC ) 1 BLK +! 0 IN ! BLK @ 7 AND 0=
        IF ( SCR END ) ?EXEC R> DROP ENDIF    ( DISC DEPENDENT )
      ELSE ( TERMINAL ) R> DROP
      ENDIF ; ! IMMEDIATE
                                                              ;S
246
(  FILL, ERASE, BLANKS, HOLD, PAD                  WFR-79APR02 )

: FILL                  ( FILL MEMORY BEGIN-3, QUAN-2, BYTE-1 *)
        SWAP >R OVER C! DUP 1+ R> 1 - CMOVE ;
: ERASE            ( FILL MEMORY WITH ZEROS   BEGIN-2, QUAN-1 *)
        0 FILL ;
: BLANKS                 ( FILL WITH BLANKS   BEGIN-2, QUAN-1 *)
        BL FILL ;
: HOLD                                ( HOLD CHARACTER IN PAD *)
        -1 HLD +! HLD @ C! ;
: PAD   HERE 44 + ;              ( PAD IS 68 BYTES ABOVE HERE *)
         ( DOWNWARD HAS NUMERIC OUTPUTS; UPWARD MAY HOLD TEXT *)
                                                              ;S
247
(  WORD                                            WFR-79APR02 )
: WORD          ( ENTER WITH DELIMITER, MOVE STRING TO 'HERE' *)
        BLK @ IF BLK @ BLOCK ELSE TIB @ ENDIF
        IN @ + SWAP                   ( ADDRESS-2, DELIMITER-1 )
        ENCLOSE     ( ADDRESS-4, START-3, END-2, TOTAL COUNT-1 )
        HERE 22 BLANKS            ( PREPARE FIELD OF 34 BLANKS )
        IN +!                          ( STEP OVER THIS STRING )
        OVER - >R                            ( SAVE CHAR COUNT )
        R HERE C!                        ( LENGTH STORED FIRST )
        + HERE 1+
        R> CMOVE ;         ( MOVE STRING FROM BUFFER TO HERE+1 )
                                                              ;S
248
(  {NUMBER} NUMBER -FIND                           WFR-79APR29 )

: (NUMBER)     ( CONVERT DOUBLE NUMBER, LEAVING UNCONV. ADDR. *)
        BEGIN 1+ DUP >R C@ BASE @ DIGIT
        WHILE SWAP BASE @ U* DROP ROT BASE @ U* D+
        DPL @ 1+ IF 1 DPL +! ENDIF R> REPEAT R> ;

: NUMBER          ( ENTER W/ STRING ADDR. LEAVE DOUBLE NUMBER *)
        0 0 ROT DUP 1+ C@ 2D = DUP >R + -1
        BEGIN DPL ! (NUMBER) DUP C@ BL -
        WHILE DUP C@ 2E - 0 ?ERROR 0 REPEAT
        DROP R> IF DMINUS ENDIF ;

: -FIND        ( RETURN PFA-3, LEN BYTE-2, TRUE-1; ELSE FALSE *)
        BL WORD HERE CONTEXT @ @ (FIND)
        DUP 0= IF DROP HERE LATEST (FIND) ENDIF ;             ;S
249
(  ERROR HANDLER                                   WFR-79APR20 )

: (ABORT) ABORT ;                ( USER ALTERABLE ERROR ABORT *)

: ERROR                ( WARNING: -1=ABORT, 0=NO DISC, 1=DISC *)
        WARNING @ 0<          ( PRINT TEXT LINE REL TO SCR #4 *)
        IF (ABORT) ENDIF HERE COUNT TYPE ."   ? "
        MESSAGE SP! IN @ BLK @ QUIT ;

: ID.              ( PRINT NAME FIELD FROM ITS HEADER ADDRESS *)
        PAD 020 5F FILL DUP PFA LFA OVER -
        PAD SWAP CMOVE PAD COUNT 01F AND TYPE SPACE ;
                                                              ;S
250
(  CREATE                                          WFR-79APR28 )

: CREATE               ( A SMUDGED CODE HEADER TO PARAM FIELD *)
                       ( WARNING IF DUPLICATING A CURENT NAME *)
        TIB HERE 0A0 + < 2 ?ERROR                  ( 6502 ONLY )
        -FIND         ( CHECK IF UNIQUE IN CURRENT AND CONTEXT )
        IF ( WARN USER ) DROP NFA ID. 4 MESSAGE SPACE ENDIF
        HERE DUP C@ WIDTH @ MIN 1+ ALLOT
        DUP C@ 0FD = ALLOT                         ( 6502 ONLY )
        DUP A0 TOGGLE HERE 1 - 80 TOGGLE        ( DELIMIT BITS )
        LATEST , CURRENT @ !
        HERE 2+ , ;
                                                              ;S
251
(  LITERAL DLITERAL [COMPILE] ?STACK               WFR-79APR29 )

: [COMPILE]          ( FORCE COMPILATION OF AN IMMEDIATE WORD *)
        -FIND 0= 0 ?ERROR DROP CFA , ; IMMEDIATE
: LITERAL                      ( IF COMPILING, CREATE LITERAL *)
        STATE @ IF COMPILE LIT , ENDIF ; IMMEDIATE
: DLITERAL              ( IF COMPILING, CREATE DOUBLE LITERAL *)
        STATE @ IF SWAP [COMPILE] LITERAL
                        [COMPILE] LITERAL ENDIF ; IMMEDIATE
( FOLLOWING DEFINITION IS INSTALLATION DEPENDENT )
: ?STACK           ( QUESTION UPON OVER OR UNDERFLOW OF STACK *)
        09E SP@ < 1 ?ERROR SP@ 020 < 7 ?ERROR ;
                                                              ;S
252
(  INTERPRET                                       WFR-79APR18 )

: INTERPRET    ( INTERPRET OR COMPILE SOURCE TEXT INPUT WORDS *)
        BEGIN -FIND
          IF ( FOUND ) STATE @ <
            IF CFA , ELSE CFA EXECUTE ENDIF ?STACK
          ELSE
            HERE NUMBER DPL @ 1+
            IF [COMPILE] DLITERAL
            ELSE DROP [COMPILE] LITERAL
            ENDIF ?STACK
          ENDIF
        AGAIN ;
                                                              ;S
253
(  IMMEDIATE VOCAB DEFIN FORTH                 DJK-WFR-79APR29 )

: IMMEDIATE         ( TOGGLE PREC. BIT OF LATEST CURRENT WORD *)
        LATEST 40 TOGGLE ;

: VOCABULARY   ( CREATE VOCAB WITH 'V-HEAD' AT VOC INTERSECT. *)
        <BUILDS A081 , CURRENT @ CFA ,
         HERE  VOC-LINK @ , VOC-LINK !
         DOES> 2+ CONTEXT ! ;
VOCABULARY FORTH IMMEDIATE             ( THE TRUNK VOCABULARY *)

: DEFINITIONS         ( SET THE CONTEXT ALSO AS CURRENT VOCAB *)
        CONTEXT @ CURRENT ! ;

: (                      ( SKIP INPUT UNTIL RIGHT PARENTHESIS *)
        29 WORD ; IMMEDIATE                                   ;S
254
(  QUIT ABORT                                      WFR-79APR29 )

: QUIT                     ( RESTART, INTERPRET FROM TERMINAL *)
        0 BLK ! [COMPILE] ]
        BEGIN RP! CR QUERY INTERPRET
          STATE @ 0= IF ."  OK" ENDIF AGAIN ;

: ABORT                   ( WARM RESTART, INCLUDING REGISTERS *)

                                                              ;S
255
(  COLD START                                      WFR-79APR29 )

CODE COLD                ( COLD START, INITIALIZING USER AREA *)
                                                    C; ( TODO *)
                                                              ;S
256
(  MATH UTILITY                                DJK-WFR-YYmmmDD )
CODE S->D              ( EXTEND SINGLE INTEGER TO DOUBLE TODO *)

: +-    0< IF MINUS ENDIF ;    ( APPLY SIGN TO NUMBER BENEATH *)
: D+-                ( APPLY SIGN TO DOUBLE NUMBER UNDERNEATH *)
        0< IF DMINUS ENDIF ;
: ABS   DUP +- ;                       ( LEAVE ABSOLUTE VALUE *)
: DABS  DUP D+- ;             ( DOUBLE INTEGER ABSOLUTE VALUE *)
: MIN                          ( LEAVE SMALLER OF TWO NUMBERS *)
        OVER OVER > IF SWAP ENDIF DROP ;
: MAX                           ( LEAVE LARGER OF TWO NUMBERS *)
        OVER OVER < IF SWAP ENDIF DROP ;                      ;S
257
(  MATH PACKAGE                                DJK-WFR-79APR29 )
: M*      ( LEAVE SIGNED DOUBLE PRODUCT OF TWO SINGLE NUMBERS *)
        OVER OVER XOR >R ABS SWAP ABS U* R> D+- ;
: M/            ( LEAVE SIGNED REMAINDER-2, SIGNED QUOTIENT-1 *)
        OVER >R >R DABS R ABS U/
        R> R XOR +- SWAP R> +- SWAP ;
: *     U* DROP ;                            ( SIGNED PRODUCT *)
: /MOD  >R S->D R> M/ ;                 ( LEAVE REM-2, QUOT-1 *)
: /     /MOD SWAP DROP ;                     ( LEAVE QUOTIENT *)
: MOD   /MOD DROP ;                         ( LEAVE REMAINDER *)
: */MOD               ( TAKE RATION OF THREE NUMBERS, LEAVING *)
        >R M* R> M/ ;                     ( REM-2, QUOTIENT-1 *)
: /*    */MOD SWAP DROP ;        ( LEAVE RATIO OF THREE NUMBS *)
: M/MOD        ( DOUBLE, SINGLE DIVISOR ... REMAINDER, DOUBLE *)
        >R 0 R U/ R> SWAP >R U/ R> ;
                                                              ;S
258
(  DISC UTILITY, GENERAL USE                       WFR-79APR02 )
FIRST  VARIABLE  USE            ( NEXT BUFFER TO USE, STALEST *)
FIRST  VARIABLE  PREV        ( MOST RECENTLY REFERNCED BUFFER *)

: +BUF      ( ADVANCE ADDRESS-1 TO NEXT BUFFER, RETURNS FALSE *)
        84 ( I.E. B/BUF+4 ) + DUP LIMIT =        ( IF AT PREV *)
        IF DROP FIRST ENDIF DUP PREV @ - ;

: UPDATE      ( MARK THE BUFFER POINTED TO BY PREV AS ALTERED *)
        PREV @ @ 8000 OR PREV @ ! ;

: EMPTY-BUFFERS    ( CLEAR BLOCK BUFFERS; DON'T WRITE TO DISC *)
        FIRST LIMIT OVER - ERASE ;

: DR0     0 OFFSET ! ;                      ( SELECT DRIVE #0 *)
: DR1  07D0 OFFSET ! ;                   ;S ( SELECT DRIVE #1 *)
259
(  BUFFER                                          WFR-79APR02 )
: BUFFER                  ( CONVERT BLOCK# TO STORAGE ADDRESS *)
   USE @ DUP >R                ( BUFFER ADDRESS TO BE ASSIGNED )
   BEGIN +BUF UNTIL ( AVOID PREV ) USE !       ( FOR NEXT TIME )
   R @ 0<                     ( TEST FOR UPDATE IN THIS BUFFER )
   IF                                 ( UPDATED, FLUSH TO DISC )
      R 2+                                      ( STORAGE LOC. )
      R @ 7FFF AND                               ( ITS BLOCK # )
      0 R/W                             ( WRITE SECTOR TO DISC )
   ENDIF  
   R !                    ( WRITE NEW BLOCK # INTO THIS BUFFER )
   R PREV !                     ( ASSIGN THIS BUFFER AS 'PREV' )
   R> 2+ ;                          ( MOVE TO STORAGE LOCATION )
                                                              ;S
260
(  BLOCK                                           WFR-79APR02 )
: BLOCK          ( CONVERT BLOCK NUMBER TO ITS BUFFER ADDRESS *)
   OFFSET @ + >R              ( RETAIN BLOCK # ON RETURN STACK )
   PREV @ DUP @ R - DUP +                     ( BLOCK = PREV ? )
   IF                                               ( NOT PREV )
      BEGIN +BUF 0=                ( TRUE UPON REACHING 'PREV' )
         IF DROP R BUFFER                            ( WRAPPED )
            DUP R ! R/W                ( READ SECTOR FROM DISC )
            2 -                                       ( BACKUP )
         ENDIF
         DUP @ R - DUP + 0=
      UNTIL                              ( WITH BUFFER ADDRESS )
      DUP PREV !
   ENDIF
   R> DROP 2+ ;                                               ;S
261
(  TEXT OUTPUT FORMATTING                          WFR-79MAY03 )

: (LINE)          ( LINE#, SCR#, ... BUFFER ADDRESS, 64 COUNT *)
        >R C/L B/BUF */MOD R> B/SCR * +
        BLOCK + C/L ;

: .LINE                            ( LINE#, SCR#, ... PRINTED *)
        (LINE) -TRAILING TYPE ;

: MESSAGE       ( PRINT LINE RELATIVE TO SCREEN #4 ON DRIVE 0 *)
        WARNING @
        IF                                 ( DISC IS AVAILABLE )
           -DUP IF 4 OFFSET @ B/SCR / - .LINE ENDIF
        ELSE ." MSG # " . ENDIF ;                             ;S
note: screen 76 patches the forward ref to "." above.
262
(  LOAD, -->                                       WFR-79APR02 )

: LOAD                           ( INTERPRET SCREEN FROM DISC *)
    BLK @ >R IN @ >R 0 IN ! B/SCR * BLK !
    INTERPRET R> IN ! R> BLK ! ;

: -->                ( CONTINUE INTERPRETATION ON NEXT SCREEN *)
    ?LOADING 0 IN ! B/SCR BLK @ OVER
    MOD - BLK +! ; IMMEDIATE                                  ;S
263
(  INSTALLATION DEPENDENT TERMINAL I-O             WFR-79APR26 )

( EMIT )                         ( SEND CHARACTER TO TERMINAL *)
  HERE -2 BYTE.IN EMIT !                  ( PATCH EMIT TO HERE )
                            ( ASM IMPLEMENTATION OF EMIT TODO *)

( KEY )                         ( GET CHARACTER FROM TERMINAL *)
  HERE -2 BYTE.IN KEY !                ( PATCH KEY CFA TO HERE )
                             ( ASM IMPLEMENTATION OF KEY TODO *)

                                                              ;S
264
(  INSTALLATION DEPENDENT TERMINAL I-O             WFR-79APR02 )

( ?TERMINAL )                    ( CHECK FOR TERMINAL 'BREAK' *)
  HERE -2 BYTE.IN ?TERMINAL !        ( PATCH ?TERMINAL TO HERE )
                       ( ASM IMPLEMENTATION OF ?TERMINAL TODO *)

( CR )                  ( EXECUTE CARRIAGE RETURN ON TERMINAL *)
  HERE -2 BYTE.IN CR !                      ( PATCH CR TO HERE )
                              ( ASM IMPLEMENTATION OF CR TODO *)

                                                              ;S
265
(  INSTALLATION DEPENDENT DISC INTERFACE           WFR-79APR02 )
;S                                                     ( TODO *)
266
(  INSTALLATION DEPENDENT DISC INTERFACE           WFR-79APR02 )
;S                                                     ( TODO *)
267
(  INSTALLATION DEPENDENT BLOCK-WRITE               WFR-790103 )

CODE BLOCK-WRITE          ( SEND TO DISC FROM ADDR-2, COUNT-1 *)
                                                    C; ( TODO *)
                                                              ;S
268
(  INSTALLATION DEPENDENT BLOCK-READ                WFR-790103 )

CODE BLOCK-READ                                  ( BUF.ADDR-1 *)
                                                    C; ( TODO *)
                                                              ;S
269
(  R/W                                             WFR-79MAY03 )
CODE R/W
                                                              ;S
270
(  FORWARD REFERENCES                              WFR-YYmmmDD )
                                                       ( TODO *)
                                                              ;S
271
( FORWARD REFERENCES                               WFR-YYmmmDD )
                                                       ( TODO *)
                                                              ;S
272
(  ', FORGET                                   DJK-WFR-79DEC02 )
HEX

: '           ( FIND NEXT WORDS PFA; COMPILE IT, IF COMPILING *)
  -FIND 0= 0 ? ERROR DROP [COMPILE] LITERAL ; IMMEDIATE

: FORGET                      ( Dave Kilbridge's Smart Forget *)
  [COMPILE] ' NFA DUP FENCE @ U< 15 ?ERROR
  >R VOC-LINK @                 ( start with latest vocabulary )
  BEGIN R OVER U< WHILE [COMPILE] FORTH DEFINITIONS
     @ DUP VOC-LINK ! REPEAT            ( unlink from voc list )
  BEGIN DUP 4 -                      ( start with phanbtom nfa )
    BEGIN PFA LFA @ DUP R U< UNTIL
    OVER 2 - ! @ -DUP 0= UNTIL                 ( end of list ? )
  R> DP ! ; 
                                                              ;S
273
(  CONDITIONAL COMPILER, PER SHIRA                 WFR-79APR01 )
: BACK     HERE - , ;               ( RESOLVE BACKWARD BRANCH *)
: BEGIN    ?COMP HERE ! ;                           IMMEDIATE
: ENDIF    ?COMP 2 ?PAIRS HERE OVER - SWAP ! ;      IMMEDIATE
: THEN     [COMPILE] ENDIF ;                        IMMEDIATE
: DO       COMPILE (DO) HERE 3 ;                    IMMEDIATE
: LOOP     3 ?PAIRS COMPILE (LOOP) BACK ;           IMMEDIATE
: +LOOP    3 ?PAIRS COMPILE (+LOOP) BACK ;          IMMEDIATE
: UNTIL    1 ?PAIRS COMPILE 0BRANCH BACK ;          IMMEDIATE
                                                              ;S
274
(  CONDITIONAL COMPILER                            WFR-79APR01 )
: END      [COMPILE] UNTIL ;                        IMMEDIATE
: AGAIN    1 ?PAIRS COMPILE BRANCH BACK ;           IMMEDIATE
: REPEAT   >R >R [COMPILE] AGAIN
           R> R> 2 - [COMPILE] ENDIF ;              IMMEDIATE
: IF       COMPILE 0BRANCH HERE 0 , 2 ;             IMMEDIATE
: ELSE     2 ?PAIRS COMPILE BRANCH HERE 0 ,
           SWAP 2 [COMPILE] ENDIF 2 ;               IMMEDIATE
: WHILE    [COMPILE] IF 2+ ;                        IMMEDIATE
                                                              ;S
275
(  NUMERIC PRIMITIVES                              WFR-79APR01 )
HEX
: SPACES     0 MAX -DUP IF 0 DO SPACE LOOP ENDIF ;
: <#     PAD HLD ! ;
: #>     DROP DROP HLD @ PAD OVER - ;
: SIGN   ROT 0< IF 2D HOLD ENDIF ;
: #                       ( CONVERT ONE DIGIT, HOLDING IN PAD *)
         BASE @ M/MOD ROT 9 OVER < IF 7 + ENDIF 30 + HOLD ;
: #S     BEGIN # OVER OVER + 0= UNTIL ;
                                                              ;S
276
(  OUTPUT OPERATORS                                WFR-79APR01 )
HEX
: D.R         ( DOUBLE INTEGER OUTPUT, RIGHT ALIGNED IN FIELD *)
       >R SWAP OVER DABS <# #S SIGN #>
       R> OVER - SPACES TYPE ;

: D.   0 D.R SPACE ;                  ( DOUBLE INTEGER OUTPUT *)
  
: .R   >R S->D R> D.R ;              ( ALIGNED SINGLE INTEGER *)

: .    S->D D. ;                      ( SINGLE INTEGER OUTPUT *)

: ?    @ . ;                       ( PRINT CONTENTS OF MEMORY *)
( UNCOMMENT TO PATCH MESSAGE TO PRINT MESSAGE NUMBER USING . )
(  ' . CFA ' MESSAGE 2A + ! )                                 ;S
277
(  PROGRAM DOCUMENTATION                           WFR-79APR01 )
HEX
: LIST                       ( LIST SCREEN BY NUMBER ON STACK *)
    DECIMAL CR DUP SCR !
    ." SCR # " . 10 0 DO R I 3 .R SPACE
    I SCR @ .LINE LOOP CR ;
: INDEX        ( PRINT FIRST LINE OF EACH SCREEN FROM-2, TO-1 *)
    0C EMIT ( FORM FEED ) CR 1+ SWAP
    DO CR I 3 .R SPACE
       0 I .LINE
       ?TERMINAL IF LEAVE ENDIF LOOP ;
: TRIAD      ( PRINT 3 SCREENS ON PAGE, CONTAINING # ON STACK *)
    0C EMIT ( FF ) 3 / 3 * 3 OVER + SWAP
    DO CR I LIST LOOP CR
    0F MESSAGE CR ; DECIMAL                                   ;S
278
(  TOOLS                                           WFR-79APR20 )
HEX
: VLIST                             ( LIST CONTEXT VOCABULARY *)
    80 OUT ! CONTEXT @ @
    BEGIN OUT @ C/L > IF CR 0 OUT ! ENDIF
          DUP ID. SPCE SPACE PFA LFA @
          DUP 0= ?TERMINAL OR UNTIL DROP ;
                                                              ;S
279
(  TOOLS                                           WFR-79MAY03 )
HEX ;S                    ( DISABLE THIS SCREEN FOR THE MOMENT )

CODE MON             ( CALL MONITOR, SAVING RE-ENTRY TO FORTH *)
                                                    C; ( TODO *)

DECIMAL
  HERE        FENCE !
  HERE   28 +ORIGIN ! ( COLD START FENCE                       )
  HERE   30 +ORIGIN ! ( COLD START DP                          )
  LATEST 12 +ORIGIN ! ( TOPMOST WORD                           )
                                                              ;S
280
