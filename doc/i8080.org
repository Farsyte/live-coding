* i8080: Single Chip 8-bit Microprocessor

** Opcode Table

Here is a handy table of all the instructions.

|----------+------------+------------+----------+----------+----------+----------+----------|
| nop      | lxi  BC,## | stax BC,## | inx  BC  | inr  B   | dcr  B   | mvi  B,# | rlc      |
| ---- --- | dad  BC    | ldax BC,## | dcx  BC  | inr  C   | dcr  C   | mvi  C,# | rrc      |
| ---- --- | lxi  DE,## | stax DE,## | inx  DE  | inr  D   | dcr  D   | mvi  D,# | ral      |
| ---- --- | dad  DE    | ldax DE,## | dcx  DE  | inr  E   | dcr  E   | mvi  E,# | rar      |
| ---- --- | lxi  HL,## | shld ##    | inx  HL  | inr  H   | dcr  H   | mvi  H,# | daa      |
| ---- --- | dad  HL    | lhld ##    | dcx  HL  | inr  L   | dcr  L   | mvi  L,# | cma      |
| ---- --- | lxi  SP,## | sta  ##    | inx  SP  | inr  M   | dcr  M   | mvi  M,# | stc      |
| ---- --- | dad  SP    | lda  ##    | dcx  SP  | inr  A   | dcr  A   | mvi  A,# | cmc      |
|----------+------------+------------+----------+----------+----------+----------+----------|
| mov  B,B | mov  B,C   | mov  B,D   | mov  B,E | mov  B,H | mov  B,L | mov  B,M | mov  B,A |
| mov  C,B | mov  C,C   | mov  C,D   | mov  C,E | mov  C,H | mov  C,L | mov  C,M | mov  C,A |
| mov  D,B | mov  D,C   | mov  D,D   | mov  D,E | mov  D,H | mov  D,L | mov  D,M | mov  D,A |
| mov  E,B | mov  E,C   | mov  E,D   | mov  E,E | mov  E,H | mov  E,L | mov  E,M | mov  E,A |
| mov  H,B | mov  H,C   | mov  H,D   | mov  H,E | mov  H,H | mov  H,L | mov  H,M | mov  H,A |
| mov  L,B | mov  L,C   | mov  L,D   | mov  L,E | mov  L,H | mov  L,L | mov  L,M | mov  L,A |
| mov  M,B | mov  M,C   | mov  M,D   | mov  M,E | mov  M,H | mov  M,L | hlt      | mov  M,A |
| mov  A,B | mov  A,C   | mov  A,D   | mov  A,E | mov  A,H | mov  A,L | mov  A,M | mov  A,A |
|----------+------------+------------+----------+----------+----------+----------+----------|
| add  B   | add  C     | add  D     | add  E   | add  H   | add  L   | add  M   | add  A   |
| adc  B   | adc  C     | adc  D     | adc  E   | adc  H   | adc  L   | adc  M   | adc  A   |
| sub  B   | sub  C     | sub  D     | sub  E   | sub  H   | sub  L   | sub  M   | sub  A   |
| sbb  B   | sbb  C     | sbb  D     | sbb  E   | sbb  H   | sbb  L   | sbb  M   | sbb  A   |
| ana  B   | ana  C     | ana  D     | ana  E   | ana  H   | ana  L   | ana  M   | ana  A   |
| xra  B   | xra  C     | xra  D     | xra  E   | xra  H   | xra  L   | xra  M   | xra  A   |
| ora  B   | ora  C     | ora  D     | ora  E   | ora  H   | ora  L   | ora  M   | ora  A   |
| cmp  B   | cmp  C     | cmp  D     | cmp  E   | cmp  H   | cmp  L   | cmp  M   | cmp  A   |
|----------+------------+------------+----------+----------+----------+----------+----------|
| rnz      | pop  BC    | jnz  ##    | jmp  ##  | cnz  ##  | push BC  | adi  #   | rst  0   |
| rz       | ret        | jz   ##    | ---- --- | cz   ##  | call ##  | aci  #   | rst  1   |
| rnc      | pop  DE    | jnc  ##    | out  #   | cnc  ##  | push DE  | sui  #   | rst  2   |
| rc       | ---- ---   | jc   ##    | in   #   | cc   ##  | ---- --- | sbi  #   | rst  3   |
| rpo      | pop  HL    | jpo  ##    | xthl     | cpo  ##  | push HL  | ani  #   | rst  4   |
| rpe      | pchl       | jpe  ##    | xchg     | cpe  ##  | ---- --- | xri  #   | rst  5   |
| rp       | pop  PSW   | jp   ##    | di       | cp   ##  | push PSW | ori  #   | rst  6   |
| rm       | sphl       | jm   ##    | ei       | cm   ##  | ---- --- | cpi  #   | rst  7   |
|----------+------------+------------+----------+----------+----------+----------+----------|

** Coming out of RESET

The initial condition for all simulation modules is the expected
initial power-on state, which for the 8080 means that RESET is high
and READY is low. We expect the startup cycle to be, first, releasing
the RESET signal, then raising READY.

This simulation currently does not allow for the environment to
prevent the memory chip from sending a rising edge on RDYIN. This
might be changed but only if it could be done without impacting
the performance during normal operation.

Note that we are executing from ROM, and the ROM simulation is set up
to set RDYIN low until it sees two /RD edges with the same address;
the last four T-states here are the first instruction in the next
plot.

[[file:img/i8080_bist_reset.png]]

** Execute MVI instructions

[[file:img/i8080_bist_mvi_abc.png]]

[[file:img/i8080_bist_mvi_dehl.png]]

** Execute MOV instructions

[[file:img/i8080_bist_mov_bc.png]]

[[file:img/i8080_bist_mov_de.png]]

[[file:img/i8080_bist_mov_hl.png]]

[[file:img/i8080_bist_mov_a.png]]

** Execute EI, DI, and HLT instructions

[[file:img/i8080_bist_eidihlt.png]]

** ALU Operations

*** ADD

[[file:img/i8080_alu_add.png]]

*** ADC

[[file:img/i8080_alu_adc.png]]

*** SUB

[[file:img/i8080_alu_sub.png]]

*** SBB

[[file:img/i8080_alu_sbb.png]]

*** ANA

[[file:img/i8080_alu_ana.png]]

*** XRA

[[file:img/i8080_alu_xra.png]]

*** ORA

[[file:img/i8080_alu_ora.png]]

*** CMP

[[file:img/i8080_alu_cmp.png]]

*** INR

[[file:img/i8080_alu_inr.png]]

*** DCR

[[file:img/i8080_alu_dcr.png]]

*** INX

[[file:img/i8080_alu_inx.png]]

*** DCX

[[file:img/i8080_alu_dcx.png]]

*** LXI

[[file:img/i8080_lxi.png]]

*** DAD

[[file:img/i8080_dad.png]]

*** JMP Jcc

C3 jmp  ##

DA jc   ##
FA jm   ##
D2 jnc  ##
C2 jnz  ##
F2 jp   ##
EA jpe  ##
E2 jpo  ##
CA jz   ##

** Not Yet Implemented

*** IN and OUT

DB in   # 
D3 out  # 

*** ALU Immediates

C6 adi  # 
CE aci  # 
D6 sui  # 
DE sbi  # 
E6 ani  # 
EE xri  # 
F6 ori  # 
FE cpi  #
 
*** LDA STA

3A lda  ##
32 sta  ##

*** LDAX LHLD STAX SHLD

0A ldax BC,##
1A ldax DE,##
2A lhld ##

02 stax BC,##
12 stax DE,##
22 shld ##

*** Operations on M

**** MOV 

46 mov  B,M
4E mov  C,M
56 mov  D,M
5E mov  E,M
66 mov  H,M
6E mov  L,M
7E mov  A,M

70 mov  M,B
71 mov  M,C
72 mov  M,D
73 mov  M,E
74 mov  M,H
75 mov  M,L
77 mov  M,A

**** ALUop

34 inr  M
35 dcr  M
86 add  M
8E adc  M
96 sub  M
9E sbb  M
A6 ana  M
AE xra  M
B6 ora  M
BE cmp  M

**** MVI  

36 mvi  M,#

*** PUSH rp, POP rp

C5 push BC
D5 push DE
E5 push HL
F5 push PSW

C1 pop  BC
D1 pop  DE
E1 pop  HL
F1 pop  PSW

E3 xthl

*** CALL Cc

CD call ##

DC cc   ##
FC cm   ##
D4 cnc  ##
C4 cnz  ##
F4 cp   ##
EC cpe  ##
E4 cpo  ##
CC cz   ##

*** RET, Rc

C9 ret

C0 rnz
C8 rz
D0 rnc
D8 rc
E0 rpo
E8 rpe
F0 rp
F8 rm

*** RST n

C7 rst  0
CF rst  1
D7 rst  2
DF rst  3
E7 rst  4
EF rst  5
F7 rst  6
FF rst  7
