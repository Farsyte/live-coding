     1     		        title	'Boot ROM for the (void *)8080 simulated microcomputer'
     2
     3 			;;; === === === === === === === === === === === === === === === ===
     4 			;;; VoidStar8080 memory configuration
     5 			;;; === === === === === === === === === === === === === === === ===
     6
     7      00 3E	ramkb   equ     62
     8      F8 00	ramtop  equ     ramkb*1024
     9      00 02	romkb	equ     2
    10      F8 00	rombase equ     (64-romkb)*1024
    11
    12 			;;; === === === === === === === === === === === === === === === ===
    13 			;;; RAM usage by ROM
    14 			;;; === === === === === === === === === === === === === === === ===
    15
    16      F7 00	kbbuf   equ     ramtop-256      ;dedicate a page to kbbuf
    17      F7 00	initsp	equ     kbbuf
    18
    19 			;;; === === === === === === === === === === === === === === === ===
    20 			;;; CDEV Controller I/O Ports
    21 			;;; === === === === === === === === === === === === === === === ===
    22
    23      00 00	ttyd	equ     0               ;read/write data from/to printing console
    24      00 01	ttyc	equ     1               ;printing console status/control port
    25      00 02	crtd	equ     2               ;read/write data from/to video console
    26      00 03	crtc	equ     3               ;video console status/control port
    27      00 04	pptd	equ     4               ;read/write data from/to paper tape
    28      00 05	pptc	equ     5               ;paper tape status/control port
    29      00 06	lptd	equ     6               ;write data to line printer
    30      00 07	lptc	equ     7               ;line printer status/control port
    31
    32 			;;; === === === === === === === === === === === === === === === ===
    33 			;;; BDEV Controller I/O Ports
    34 			;;; === === === === === === === === === === === === === === === ===
    35
    36      00 0A	bdres	equ	10              ;reset controller (drv 0, trk 0, sec 1)
    37      00 0B	bddrv	equ	11              ;select drive
    38      00 0C	bdtrk	equ	12              ;select track
    39      00 0D	bdsec	equ	13              ;select sector
    40      00 0E	bddat	equ	14              ;read/write next byte
    41
    42 			;;; === === === === === === === === === === === === === === === ===
    43 			;;; SYSTEM RESET HANDLING
    44 			;;; === === === === === === === === === === === === === === === ===
    45
    46 			        ;; BOOT ROM lives in the top 2 KiB of memory while the system
    47 			        ;; is running normally, and is visible in all of memory while
    48 			        ;; the SHADOW mechanism is active.
    49 			        ;;
    50 			        ;; The CPU arrives here during system reset due to SHADOW
    51 			        ;; being active; also arrive here if code jumps to ROMBASE to
    52 			        ;; initiate a cold start.
    53 			        ;;
    54 			        ;; Disable interrupts until we are properly initialized and
    55 			        ;; jump to the COLD START routine. This will release the
    56 			        ;; SHADOW facility if it is active.
    57
    58      F8 00	        org     rombase
    59
    60 F800 F3		        di
    61 F801 C3 04 F8	        jmp     warm
    62
    63 			;;; === === === === === === === === === === === === === === === ===
    64 			;;; ROM MONITOR ENTRY POINT
    65 			;;; === === === === === === === === === === === === === === === ===
    66
    67 			        ;; === === === === === === === === === === === ===
    68 			        ;; Get us back to a known good state:
    69 			        ;; - reset the BDEV controller (cancel transfer in progress)
    70 			        ;; - point SP back at the memory for the ROM stack
    71 			        ;; === === === === === === === === === === === ===
    72
    73 			warm:
    74 F804 00		        nop
    75 F805 31 00 40	        lxi     sp,4000h       ;establish rom stack
    76 F808 CD 74 FA	        call    ttyilm
    77 F80B		        db      10,13,'VoidStar8080 boot rom v0.0.1 build 3',10,13,10,0
            0A 0D 56 6F 
            69 64 53 74 
            61 72 38 30 
            38 30 20 62 
            6F 6F 74 20 
            72 6F 6D 20 
            76 30 2E 30 
            2E 31 20 62 
            75 69 6C 64 
            20 33 0A 0D 
            0A 00 
    78
    79 F835 CD A5 F8	        call    memsize
    80
    81 			mon:    
    82 F838 DB 0A	        in      bdres           ;reset BDEV controller
    83 F83A FB		        ei                      ;enable the interrupt system
    84
    85 F83B CD 74 FA	        call    ttyilm
    86 F83E		        db      10,13,'(void *) ',0
            0A 0D 28 76 
            6F 69 64 20 
            2A 29 20 00 
            
    87
    88 F84A CD 37 F9	        call    getline
    89
    90 F84D E5			push	hl
    91 F84E CD 74 FA		call	ttyilm
    92 F851		        db      10,13,'getline done, calling dispatch',0
            0A 0D 67 65 
            74 6C 69 6E 
            65 20 64 6F 
            6E 65 2C 20 
            63 61 6C 6C 
            69 6E 67 20 
            64 69 73 70 
            61 74 63 68 
            00 
    93 F872 E1			pop	hl
    94
    95 F873 7E		        mov     a,m
    96 F874 B7		        ora     a
    97 F875 C4 BC F9	        cnz	dispatch
    98
    99 F878 CD 74 FA		call	ttyilm
   100 F87B		        db      10,13,'dispatch done, looping back to mon',10,13,0
            0A 0D 64 69 
            73 70 61 74 
            63 68 20 64 
            6F 6E 65 2C 
            20 6C 6F 6F 
            70 69 6E 67 
            20 62 61 63 
            6B 20 74 6F 
            20 6D 6F 6E 
            0A 0D 00 
   101
   102 F8A2 C3 38 F8	        jmp     mon
   103
   104 			memsize:
   105 			        ;; report memory size.
   106 F8A5 21 00 00	        lxi     hl,0000h        ;test address
   107 			memcheck:
   108 F8A8 7E		        mov     a,m             ;read original value
   109 F8A9 4F		        mov     c,a             ;save it for comparison
   110 F8AA 2F		        cma     a
   111 F8AB 77		        mov     m,a             ;write different value
   112 F8AC 79		        mov     a,c             ;grab original value
   113
   114 F8AD BE		        cmp     m               ;compare original vs memory
   115
   116 F8AE CA DD F8	        jz      romfound        ;if unchanged, this is not ram.
   117
   118 F8B1 77		        mov     m,a             ;restore memory value
   119
   120 F8B2 24		        inr     h
   121 F8B3 C2 A8 F8	        jnz     memcheck
   122
   123 F8B6 CD 74 FA	        call    ttyilm
   124 F8B9		        db      10,13,'RAM as far as the eye can see.',10,13,0
            0A 0D 52 41 
            4D 20 61 73 
            20 66 61 72 
            20 61 73 20 
            74 68 65 20 
            65 79 65 20 
            63 61 6E 20 
            73 65 65 2E 
            0A 0D 00 
   125 F8DC C9		        ret
   126
   127 			romfound:
   128
   129 F8DD E5		        push    hl
   130 F8DE D5		        push    de
   131 F8DF C5		        push    bc
   132
   133 F8E0 7C		        mov     a,h
   134 F8E1 32 00 01	        sta     0100h
   135
   136 			        ;; divide A by ten,
   137 			        ;; leaving quotient in b
   138 			        ;; and remainder in c
   139
   140 			        ;; ALSO HAD A BUG IN PRINTING:
   141 			        ;; RRC does not take a shift count.
   142
   143 F8E4 0F		        rrc
   144 F8E5 0F		        rrc
   145 F8E6 32 00 01	        sta     0100h
   146
   147 			        ;; compute a/10 and a%10
   148 			        ;; b := a/10
   149 			        ;; a := a%10
   150 			        ;; using c == 9
   151 F8E9 01 0A 00	        lxi     bc,10
   152
   153 			loop:
   154 F8EC 91		        sub     c
   155 F8ED 32 00 01	        sta     0100h
   156 F8F0 04		        inr     b
   157 F8F1 D2 EC F8	        jnc     loop
   158 			out:
   159 F8F4 81		        add     c
   160 F8F5 32 00 01	        sta     0100h
   161 F8F8 4F		        mov     c,a
   162 F8F9 05		        dcr     b
   163
   164 			        ;; divided A by ten,
   165 			        ;; left quotient in b,
   166 			        ;; remainder in c,
   167 			        ;; and Z flag set if quotient is zero.
   168
   169 F8FA CA 0C F9	        jz      skiptens
   170
   171 F8FD C5		        push    bc
   172 F8FE 3E 30	        mvi     a,'0'
   173 F900 32 00 01	        sta     0100h
   174 F903 80		        add     b
   175 F904 32 00 01	        sta     0100h
   176 F907 4F		        mov     c,a
   177 F908 CD 84 FA	        call    ttyput
   178 F90B C1		        pop     bc
   179
   180 			skiptens:
   181 F90C 3E 30	        mvi     a,'0'
   182 F90E 32 00 01	        sta     0100h
   183 F911 81		        add     c
   184 F912 32 00 01	        sta     0100h
   185 F915 4F		        mov     c,a
   186 F916 CD 84 FA	        call    ttyput
   187 			        
   188 F919 C1		        pop     bc
   189 F91A D1		        pop     de
   190 F91B E1		        pop     hl
   191
   192 F91C CD 74 FA	        call    ttyilm
   193 F91F		        db      ' KiB memory detected',10,13,0
            20 4B 69 42 
            20 6D 65 6D 
            6F 72 79 20 
            64 65 74 65 
            63 74 65 64 
            0A 0D 00 
   194 F936 C9		        ret
   195 			        
   196
   197 			        
   198 				;; === === === === === === === === === === === ===
   199 			        ;; getline: read a string from the keyboard.
   200 			        ;; - CR and LF indicate output is complete
   201 			        ;; - BS and DEL erase to the left;
   202 			        ;;   if at the left margin they BEEP.
   203 			        ;; - NAK (Control-U) cancels the line
   204 			        ;; backspacing to the left of the first column.
   205 			        ;; returns the address of the start of the line,
   206 			        ;; and forces a zero at the end of the line.
   207 				;; === === === === === === === === === === === ===
   208
   209      00 07	BEL     equ     07h
   210      00 08	BS      equ     08h
   211      00 09	TAB     equ     09h
   212      00 0A	LF      equ     0Ah
   213      00 0D	CR      equ     0Dh
   214      00 15	NAK     equ     15h
   215      00 7F	DEL     equ     7Fh
   216
   217 			getline:
   218 F937 21 00 F7	        lxi     hl,kbbuf
   219
   220 			getline_clear:  
   221 F93A 36 00	        mvi     m,0
   222 F93C 2C		        inr     l
   223 F93D C2 3A F9	        jnz     getline_clear
   224 F940 2C		        inr     l
   225
   226 F941 CD 49 F9	        call    getline_loop
   227 F944 21 01 F7	        lxi     hl,kbbuf+1
   228 F947 7E		        mov     a,m
   229 F948 C9		        ret
   230
   231 			getline_loop:
   232 F949 CD 8F FA	        call    ttyget
   233
   234 			        ;; CR or LF ends the input and accepts the line.
   235 F94C FE 0A	        cpi     LF
   236 F94E C8		        rz
   237 F94F FE 0D	        cpi     CR
   238 F951 C8		        rz
   239
   240 			        ;; NAK (Control-U) cancels the line,
   241 			        ;; and returns an empty line.
   242 F952 FE 15	        cpi     NAK
   243 F954 CA A6 F9	        jz      getline_cancel
   244 			        
   245 F957 FE 08	        cpi     BS
   246 F959 CA 84 F9	        jz      getline_backspace
   247 F95C FE 7F	        cpi     DEL
   248 F95E CA 84 F9	        jz      getline_backspace
   249
   250 			        ;; reject other control characters
   251 F961 FE 20	        cpi     ' '
   252 F963 DA 9E F9	        jc      getline_nope
   253
   254 			        ;; otherwise: add to buffer.
   255 F966 77		        mov     m,a
   256 F967 4F		        mov     c,a
   257 F968 CD 84 FA	        call    ttyput
   258 F96B 2C		        inr     l
   259 F96C C2 49 F9	        jnz     getline_loop
   260 			        ;; hey, we wrapped. cancel.
   261 F96F 2D		        dcr     l
   262 F970 36 00	        mvi     m,0
   263 			        ;; and remove the echoed character from the display
   264 F972 0E 08	        mvi     c,BS
   265 F974 CD 84 FA	        call    ttyput
   266 F977 0E 20	        mvi     c,' '
   267 F979 CD 84 FA	        call    ttyput
   268 F97C 0E 08	        mvi     c,BS
   269 F97E CD 84 FA	        call    ttyput
   270 F981 C3 9E F9	        jmp     getline_nope
   271 			        
   272 			getline_backspace:
   273 F984 2D		        dcr     l
   274 F985 CA 9C F9	        jz      getline_backspace_underflow
   275 F988 0E 08	        mvi     c,BS
   276 F98A CD 84 FA	        call    ttyput
   277 F98D 0E 20	        mvi     c,' '
   278 F98F CD 84 FA	        call    ttyput
   279 F992 0E 08	        mvi     c,BS
   280 F994 CD 84 FA	        call    ttyput
   281 F997 36 00	        mvi     m,0
   282 F999 C3 49 F9	        jmp     getline_loop
   283
   284 			getline_backspace_underflow:
   285 F99C 2E 01	        mvi     l,1
   286 			getline_nope:
   287 F99E 0E 07	        mvi     c,BEL
   288 F9A0 CD 84 FA	        call    ttyput
   289 F9A3 C3 49 F9	        jmp     getline_loop
   290
   291 			getline_cancel:
   292 F9A6 2D		        dcr     l
   293 F9A7 C8		        rz
   294 F9A8 0E 08	        mvi     c,BS
   295 F9AA CD 84 FA	        call    ttyput
   296 F9AD 0E 20	        mvi     c,' '
   297 F9AF CD 84 FA	        call    ttyput
   298 F9B2 0E 08	        mvi     c,BS
   299 F9B4 CD 84 FA	        call    ttyput
   300 F9B7 36 00	        mvi     m,0
   301 F9B9 C3 A6 F9	        jmp     getline_cancel
   302
   303 				;; === === === === === === === === === === === ===
   304 			        ;; dispatch: route control to command
   305 			        ;; (HL) points to the command line,
   306 			        ;; (A) already has the first charcter from the line.
   307 				;; === === === === === === === === === === === ===
   308 			dispatch:
   309
   310 			        ;; when we get here, the cursor is still where it was
   311 			        ;; when the user pressed CR, LF, or NAK. Bop down to
   312 			        ;; the next display line before doing anything.
   313 F9BC E5		        push    hl
   314 F9BD 22 00 01	        shld    0100H
   315 F9C0 CD 74 FA	        call    ttyilm
   316 F9C3		        db      10,13,'dispatch... command is: ',0
            0A 0D 64 69 
            73 70 61 74 
            63 68 2E 2E 
            2E 20 63 6F 
            6D 6D 61 6E 
            64 20 69 73 
            3A 20 00 
   317 F9DE E1		        pop     hl
   318 F9DF 22 00 01	        shld    0100H
   319
   320 F9E2 4E		        mov     c,m             ;recover 1st char of command line
   321
   322 F9E3 E5		        push    hl              ;keep command line ptr safe on stack
   323 F9E4 CD 84 FA	        call    ttyput
   324 F9E7 CD 74 FA	        call    ttyilm
   325 F9EA		        db      10,13,0
            0A 0D 00 
   326 F9ED E1		        pop     hl
   327
   328 F9EE 22 00 01	        shld    0100H
   329
   330 F9F1 7E		        mov     a,m             ;recover 1st char of command line
   331 F9F2 32 00 01	        sta     0100H
   332
   333 F9F5 E5		        push    hl              ;keep command line ptr safe on stack
   334 F9F6 21 35 FA	        lxi     hl, command_table
   335 F9F9 1E 02	        mvi     e, command_table_len
   336 			tscan:
   337 F9FB BE		        cmp     m
   338 F9FC CA 25 FA	        jz      foundit
   339 F9FF 23		        inx     hl
   340 FA00 23		        inx     hl
   341 FA01 23		        inx     hl
   342 FA02 1D		        dcr     e
   343 FA03 C2 FB F9	        jnz     tscan
   344 			notfound:       
   345 FA06 CD 74 FA	        call    ttyilm
   346 FA09		        db      "Command not recognized.",10,13,0
            43 6F 6D 6D 
            61 6E 64 20 
            6E 6F 74 20 
            72 65 63 6F 
            67 6E 69 7A 
            65 64 2E 0A 
            0D 00 
   347 FA23 E1		        pop     hl              ;drop command string ptr from stack
   348 FA24 C9		        ret
   349
   350 			foundit:
   351 FA25 22 00 01	        shld    0100H
   352 FA28 23		        inx     hl
   353 FA29 5E		        mov     e,m
   354 FA2A 23		        inx     hl
   355 FA2B 56		        mov     d,m
   356 FA2C EB		        xchg
   357 FA2D 22 00 01	        shld    0100H
   358 FA30 E3		        xthl                ;dest -> stack, stack -> hl
   359 FA31 22 00 01	        shld    0100H
   360 FA34 C9		        ret
   361
   362 			command_table:
   363 			        ;; BUG WAS HERE: "db 'A',boot_A" wrote boot_A in 8 bits. oops.
   364 FA35		        db      'A'
            41 
   365 FA36		        dw      do_boot_A
            3BFA 
   366 FA38		        db      'H'
            48 
   367 FA39		        dw      do_halt
            59FA 
   368      00 02	command_table_len       equ     ($-command_table)/3
   369
   370 			do_boot_A:
   371 FA3B CD 74 FA	        call    ttyilm
   372 FA3E		        db      "TODO: boot from drive A", 10, 13, 0
            54 4F 44 4F 
            3A 20 62 6F 
            6F 74 20 66 
            72 6F 6D 20 
            64 72 69 76 
            65 20 41 0A 
            0D 00 
   373 FA58 C9		        ret
   374
   375 			do_halt:
   376 FA59 CD 74 FA	        call    ttyilm
   377 FA5C		        db      "Shutting down ...", 10, 13, 0
            53 68 75 74 
            74 69 6E 67 
            20 64 6F 77 
            6E 20 2E 2E 
            2E 0A 0D 00 
            
   378 FA70 76		        hlt
   379 FA71 C3 04 F8	        jmp     warm
   380
   381 				;; === === === === === === === === === === === ===
   382 			        ;; ttyilm: put the string at (PC) to the TTY.
   383 			        ;; the string is terminated by an ASCII NUL.
   384 			        ;; return to the byte following the NUL.
   385 				;; === === === === === === === === === === === ===
   386 			ttyilm:
   387 FA74 E1		        pop     hl
   388 FA75 CD 79 FA	        call    ttystr
   389 FA78 E9		        pchl
   390 			        
   391 				;; === === === === === === === === === === === ===
   392 			        ;; ttystr: put the string at (HL) to the TTY.
   393 			        ;; the string is terminated by an ASCII NUL.
   394 			        ;; on return, (HL) points to the byte following the NUL.
   395 			        ;; modifies A, C
   396 				;; === === === === === === === === === === === ===
   397 			ttystr:
   398 FA79 7E		        mov     a,m
   399 FA7A 23		        inx     hl
   400 FA7B B7		        ora     a
   401 FA7C C8		        rz
   402 FA7D 4F		        mov     c,a
   403 FA7E CD 84 FA	        call    ttyput
   404 FA81 C3 79 FA	        jmp     ttystr
   405 			        
   406 				;; === === === === === === === === === === === ===
   407 			        ;; ttyout: put the character in (C) to the TTY.
   408 				;; === === === === === === === === === === === ===
   409 			ttyput:
   410 FA84 DB 01	        in      ttyc
   411 FA86 E6 04	        ani     04h
   412 FA88 CA 84 FA	        jz      ttyput
   413 FA8B 79		        mov     a,c
   414 FA8C D3 00	        out     ttyd
   415 FA8E C9		        ret
   416
   417 				;; === === === === === === === === === === === ===
   418 			        ;; ttyget: get a key from the TTY into A.
   419 			        ;; wait until one is available.
   420 				;; === === === === === === === === === === === ===
   421 			ttyget:
   422 FA8F DB 01	        in      ttyc
   423 FA91 E6 02	        ani     02h
   424 FA93 CA 8F FA	        jz      ttyget
   425 FA96 DB 00	        in      ttyd
   426 FA98 E6 7F	        ani     07Fh
   427 FA9A C9		        ret
   428


*******************************************************************************
                                 Symbols table
*******************************************************************************

Names				Types	Values
-----				-----	------
ramkb				EQU	0003Eh
ramtop				EQU	0F800h
romkb				EQU	00002h
rombase				EQU	0F800h
kbbuf				EQU	0F700h
initsp				EQU	0F700h
ttyd				EQU	00000h
ttyc				EQU	00001h
crtd				EQU	00002h
crtc				EQU	00003h
pptd				EQU	00004h
pptc				EQU	00005h
lptd				EQU	00006h
lptc				EQU	00007h
bdres				EQU	0000Ah
bddrv				EQU	0000Bh
bdtrk				EQU	0000Ch
bdsec				EQU	0000Dh
bddat				EQU	0000Eh
BEL				EQU	00007h
BS				EQU	00008h
TAB				EQU	00009h
LF				EQU	0000Ah
CR				EQU	0000Dh
NAK				EQU	00015h
DEL				EQU	0007Fh
command_table_len		EQU	00002h
warm				Label	0F804h
mon				Label	0F838h
memsize				Label	0F8A5h
memcheck			Label	0F8A8h
romfound			Label	0F8DDh
loop				Label	0F8ECh
out				Label	0F8F4h
skiptens			Label	0F90Ch
getline				Label	0F937h
getline_clear			Label	0F93Ah
getline_loop			Label	0F949h
getline_backspace		Label	0F984h
getline_backspace_underflow	Label	0F99Ch
getline_nope			Label	0F99Eh
getline_cancel			Label	0F9A6h
dispatch			Label	0F9BCh
tscan				Label	0F9FBh
notfound			Label	0FA06h
foundit				Label	0FA25h
command_table			Label	0FA35h
do_boot_A			Label	0FA3Bh
do_halt				Label	0FA59h
ttyilm				Label	0FA74h
ttystr				Label	0FA79h
ttyput				Label	0FA84h
ttyget				Label	0FA8Fh

Statistics
----------
"Name"	= 0
"EQU"	= 27
"SET"	= 0
Labels	= 26


